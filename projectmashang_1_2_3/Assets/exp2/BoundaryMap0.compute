

// Each #kernel tells which function to compile; you can have many kernels

// 核函数

// volume map的增量更新
#pragma kernel UpdateVolumeMap
#pragma kernel UpdateVolumeMapPost

// sdf map的局部重算
#pragma kernel UpdateSDFMapPre
#pragma kernel UpdateSDFMap_1
#pragma kernel UpdateSDFMap_2
#pragma kernel UpdateSDFMapPost

#pragma kernel UpdateSDFMap

#pragma kernel ComputeVolumeAndPositionForBoundaryParticles

// 全局变量

float _supportRadius;// set for SPH kernel

float3 _dg_Translate;
float3 _dg_DomainMin;
float3 _dg_DomainMax;
int3 _dg_Resolution;
float3 _dg_CellSize;
int _dg_NumberOfCells;
int _dg_nv;
int _dg_ne_x;
int _dg_ne_y;
int _dg_ne_z;
int _dg_NumberOfNodes;

float _dg_nodeRadius; // 体积节点的半径，最早的时候就等于1.0倍的supportRadius

int _dg_NumberOfModelVertex;

float4x4 _dg_worldToLocalMatrix; // 实现模型局部坐标系和世界坐标系之间顶点坐标的转换
float4x4 _dg_localToWorldMatrix;

int _maxNeighbourNumPerVertex;

const float4 _randomASTU[1024];

// 相关buffer
RWStructuredBuffer<float3> _dg_NodeLocalPosition;
RWStructuredBuffer<float> _dg_SDFNode;
RWStructuredBuffer<float> _dg_VolumeNode;
RWStructuredBuffer<int> _dg_Cells;

RWStructuredBuffer<float3> _modelVertex;
RWStructuredBuffer<float3> _tempDeltaModelVertex;

RWStructuredBuffer<float3> _modelNormal;

RWStructuredBuffer<int2> _neighbourVertexList;

// atomic add for float的间接实现
RWStructuredBuffer<int> _tempDeltaVolume;
// 更新sdf时，atomic min的间接实现
RWStructuredBuffer<uint> _tempSDFNode;

int _triangleNum; // 三维模型的顶点数   它单独写在那么靠下的地方，脱离大部队了，难怪忘了赋值.
RWStructuredBuffer<int> _triangles; // 三角形索引数组

// 更新volume map时，顶点分组。分组需要的数据.左闭右开的.
int _vertexGroupIndexStart; // 这俩，运行时在update里再传吧……它不是固定的值
int _vertexGroupIndexEnd;
RWStructuredBuffer<int> _vertexGroupArray;

// 边界上的虚拟粒子，用于基于volume map的碰撞检测
// 数据存储格式：xyzw中，xyz表示虚拟边界粒子在世界坐标系下的位置，w表示体积.
// 数组开到3，是因为场景里最多就计划放3个物体.
struct VirtualBoundaryParticle{
    float4 vbp[3]; 
}; 
RWStructuredBuffer<VirtualBoundaryParticle> _virtualBoundaryParticlesData;

RWStructuredBuffer<float3> _positions;


// 计算邻居网格的范围，输入的是四面体的4个顶点，输出的是离散网格范围int3 cellIndexMin,cellIndexMax
void ComputeNeighborGridRange(float3 v0,float3 v1,float3 v2,float3 v3, inout int3 cellIndexMin,inout int3 cellIndexMax){
    // 根据四面体的顶点，计算其AABB包围盒的min点和max点
    float3 tetra_aabb_min = min(v0, min(v1, min(v2, v3))); // min和max，是可以用于向量的
    float3 tetra_aabb_max = max(v0, max(v1, max(v2, v3))); 

    // float3 tetra_aabb_max = (v0+v1+v2+v3)/4; // hole.obj里，三角形是比较大的，所以这么搞就容易出问题
    // float3 tetra_aabb_min = (v0+v1+v2+v3)/4;

    // // 格子越多，计算量越大额
    // tetra_aabb_min -= float3(_supportRadius*1.5,_supportRadius*1.5,_supportRadius*1.5);
    // tetra_aabb_max += float3(_supportRadius*1.5,_supportRadius*1.5,_supportRadius*1.5);

    tetra_aabb_min -= float3(_dg_nodeRadius,_dg_nodeRadius,_dg_nodeRadius) * 1.0;
    tetra_aabb_max += float3(_dg_nodeRadius,_dg_nodeRadius,_dg_nodeRadius) * 1.0;


    // 计算int3 cellIndexMin和cellIndexMax
    float3 offset;

    offset = tetra_aabb_min - _dg_DomainMin;
    cellIndexMin = int3(
        (int)(offset.x / _dg_CellSize.x),
        (int)(offset.y / _dg_CellSize.y),
        (int)(offset.z / _dg_CellSize.z)
    );

    offset = tetra_aabb_max - _dg_DomainMin;
    cellIndexMax = int3(
        (int)(offset.x / _dg_CellSize.x),
        (int)(offset.y / _dg_CellSize.y),
        (int)(offset.z / _dg_CellSize.z)
    );

    // 设置离散网格三维下标的范围，用于钳制
    int3 DGIndexMin = int3(0,0,0);
    int3 DGIndexMax = int3(_dg_Resolution.x - 1 , _dg_Resolution.y - 1, _dg_Resolution.z - 1);

    // 钳制
    cellIndexMin = clamp(cellIndexMin,DGIndexMin,DGIndexMax); // https://learn.microsoft.com/zh-cn/windows/win32/direct3dhlsl/dx-graphics-hlsl-clamp
    cellIndexMax = clamp(cellIndexMax,DGIndexMin,DGIndexMax);

}


// 当前遍历到了格子[i,j,k]，根据格子[i,j,k]在邻居网格集合里的相对位置，设置节点屏障数组，防止重复格子[i,j,k]里的节点被重复访问
void SetNodeBarrier(int3 cellIndexNow,int3 cellIndexMin,inout bool nodeBarrier[32]){
    // 初始化nodeBarrier数组，全部设置为false
    for(int i = 0;i<32;i++){
        nodeBarrier[i] = false;
    }

    if(cellIndexNow.x != cellIndexMin.x){
        int leftNodeIndex[12] = {
            0,2,4,6,
            16,17,20,21,
            24,25,26,27
        };
        for(int lni = 0 ; lni < 12; lni++){ // 用于遍历leftNodeIndex数组，用lni，是防止变量名重复
            nodeBarrier[leftNodeIndex[lni]] = true;
        }
    }

    if(cellIndexNow.y != cellIndexMin.y){
        int downNodeIndex[12] = {
            0,1,4,5,
            8,9,10,11,
            24,25,28,29  
        };
        for(int dni = 0; dni < 12; dni++){
            nodeBarrier[downNodeIndex[dni]] = true;
        }
    }

    if(cellIndexNow.z != cellIndexMin.z){
        int backNodeIndex[12] = {
            0,1,2,3,
            8,9,12,13,
            16,17,18,19
        };
        for(int bni = 0; bni < 12; bni++){
            nodeBarrier[backNodeIndex[bni]] = true;
        }
    }
}


// 还是这个名字，但是改造了一下函数体。这次，把array的定位是全局变量，应该就不存在寄存器使用过量的问题了……
float ComputeOverlapVolumeWithArr(float3 v0,float3 v1,float3 v2,float3 v3,int nodeIndex){
    // 根据4个顶点的坐标，计算四面体的体积
    // 单纯计算体积的话，4个顶点的排列顺序应该是任意的。加个abs确保是正数就可以了
    float volume = abs(dot(
            v3 - v0,
            cross(v1 - v0 , v2 - v0)
        )) / 6.0;

    float3 nodePosition = _dg_NodeLocalPosition[nodeIndex];

    // length也是很贵的，那就用dot(a,a),这个是配套的半径平方
    // float target = _supportRadius * _supportRadius * 1.15;
    float target = _dg_nodeRadius * _dg_nodeRadius * 1.0 * 1.0;

    // // 用向量模长平方代替向量模长，尝试进一步提高效率

    // 把这个存在争议的给注释掉，其它的就算全取1.0，在hole.obj下也能得到一个挺好看的结果额
    // 精确的判断，是能做的；但是成本过高额。粗筛一下就行。二八定律，基本上不费什么劲儿就能筛个八成的
    // 这里大概分为2种情况：明显等于0的，不等于0但很接近0的。之所以乘上系数1.3，是因为要把明显等于0的给筛掉。这块占大头，而且粗筛就能筛个差不多.
    // 有这步，hole能跑到50fps，没有粗筛，大概30fps

    const float _threshould = 1.44;

    if( dot(v0-nodePosition,v0-nodePosition)>target*_threshould &&
        dot(v1-nodePosition,v1-nodePosition)>target*_threshould &&
        dot(v2-nodePosition,v2-nodePosition)>target*_threshould &&
        dot(v3-nodePosition,v3-nodePosition)>target*_threshould &&
        dot((v0+v1+v2+v3)/4-nodePosition,(v0+v1+v2+v3)/4-nodePosition)>target*_threshould // 这个是平方，比如1.2**2 = 1.44
    )return 0;

    // 没啥争议
    if( dot(v0-nodePosition,v0-nodePosition)<target &&
        dot(v1-nodePosition,v1-nodePosition)<target &&
        dot(v2-nodePosition,v2-nodePosition)<target &&
        dot(v3-nodePosition,v3-nodePosition)<target
    )return volume;

    // int inner_num = 0; // 引入了软边界，所以计数器就不能用int类型了
    float inner_num = 0;
    // int total_num = 1000;
    // int total_num = 64; // 128,256,512,1024，取个整吧……

    int total_num = int(4096 * volume / 7); // 同宗同源嘛，均匀采样就是同等体积包含的采样点数量相同，而半径为1.2的球体积是7，这里四面体的体积是volume，所以，按比例算一算，就能得到这里的采样点数。
    // // total_num = clamp(total_num,1,2048);// 4096长度的常量数组会报错，所以就只搞了2048的.大部分情况下应该是够的，满体积是7，半体积是3.5，体积是3.5的四面体，挺大的了，不咋常见额.
    total_num = clamp(total_num,5,1024); // 改成static const的数组，就不报错了.

    // 把体积节点的半径干到粒子半径的2倍是可以降低误差的，把采样点干到1000也是可以降低误差的。这2项都会增加计算量。
    // ——但是比较下来，好像还是第1项影响更大。所以，在计算效率有要求的当前，优先保证第一项好了。采样点就尽可能少些

    // float virtualRadius = length(v3 - v0) / 2;//顶点移动的距离是0.010，这里取一半
    // const float virtualRadius = 1.5 * pow(2 * volume / total_num , 0.33333); // 是个常数，就提到循环外面吧.box的体积是其内切球的大约2倍

    const float virtualRadius = 0.15; // 尝试和cpu上的预计算保持一致额.

    for(int i=0;i<total_num;i++){ // 灵活裁剪……
        float3 tmp = _randomASTU[i].x * v0 + _randomASTU[i].y * v1 + _randomASTU[i].z * v2 + _randomASTU[i].w * v3;

        // 原生的mc方法
        // if(dot(tmp-nodePosition,tmp-nodePosition)<target){
        //     inner_num++;
        // }

        // 对mc方法进行改造，尝试用更少的采样点得到更平滑的结果
        float sdf = length(tmp-nodePosition) - _dg_nodeRadius ;
        // float virtualRadius = 0.010;//顶点移动的距离是0.010，这里取一半


        // if(sdf<0){
        //     inner_num+=1;
        // }

        // if(sdf<-virtualRadius){
        //     inner_num+=1;
        // }else if(sdf<+virtualRadius){

        //     // inner_num+=lerp(1,0,(sdf+virtualRadius)/(2*virtualRadius));

        //     float t = (sdf+virtualRadius)/(2*virtualRadius);
        //     inner_num += (cos(3.1415927 * t) + 1)/2; // cos，是比较贴合sphere-cap的,而且写起来又比正经的sphere-cap公式简单.

        //     // insideNum += (Mathf.Cos(Mathf.PI * t)+1)/2;

        // }
        // else{
        //     inner_num+=0;
        // }

        // 上面的写法，是否可以再精简？
        float t = clamp((sdf+virtualRadius)/(2*virtualRadius),0,1);
        inner_num += (cos(3.1415927 * t) + 1)/2;


    }

    return volume * inner_num / total_num;

}




//更新隐式map边界
[numthreads(32,1,1)]
void UpdateVolumeMap(uint3 id:SV_DispatchThreadID){ 

    // 顶点分组以后，这里也需要修改几处
    if(_vertexGroupIndexStart + (int)id.x >= _vertexGroupIndexEnd)return;

    int vertexIndex = _vertexGroupArray[_vertexGroupIndexStart + (int)id.x]; // 之前直接就是id.x，现在不同了.

    // if(id.x >= _dg_NumberOfModelVertex)return;

    // 第id.x个顶点位置没有改变，改变量为float3(0,0,0)，没有影响volume node的值，直接返回
    if(length(_tempDeltaModelVertex[vertexIndex])<1e-2)
        return;

    //局部坐标系下的mesh顶点坐标
    float3 vertexPosInLocalSpace = _modelVertex[vertexIndex];
    //模型局部坐标系 -> 世界坐标系，是加
    // float3 vertexPosInWorldSpace = vertexPosInLocalSpace +  _dg_Translate; 

    float3 vertexPosInWorldSpace = mul(float4(vertexPosInLocalSpace,1.0),transpose(_dg_localToWorldMatrix)).xyz;

    // 在弹性物体仿真的情况下，顶点位置的变化由obi插件计算，所以这个步骤可忽略
    // checkDeltaPosition(vertexPosInLocalSpace,_tempDeltaModelVertex[id.x]);    // 越转越慢的问题有缓解了，始终是25ms/40fps了

    // // 顶点再动模型就不一致了，强制该顶点不动，直接返回
    // if(length(_tempDeltaModelVertex[id.x]) == 0)
    //     return;

    float3 oldPosition = _modelVertex[vertexIndex]; // 修改之前先保存，在四面体里生成均匀采样点的时候，见过的
    _modelVertex[vertexIndex] +=  _tempDeltaModelVertex[vertexIndex]; // 更新该顶点的位置

    // DeviceMemoryBarrierWithGroupSync(); // 用来保证内存访问的可见性，而不是顺序性。而这里要求的恰好是顺序性.

    // start 隐式边界的更新
    // for(int i=0;i<6;i++){ // 这个6，应该是maxNeighbourNumPerVertex，这里只是做试验，所以没传，直接写死了，仅针对easy terrain.obj
    for(int i=0;i<_maxNeighbourNumPerVertex;i++){ // 改成cpu传值的了
        int index0 = int(vertexIndex);

        int offset = vertexIndex * _maxNeighbourNumPerVertex;
        int index1 = _neighbourVertexList[offset + i].x; // 经典二维索引展成一维索引
        int index2 = _neighbourVertexList[offset + i].y;

        if(index1 == 0 && index2 ==0){
            // continue;
            return; // 之前是continue，直接改成return吧
        }

        // point0,1,2,按计划应该是逆时针排列的

        float3 point0 = _modelVertex[index0]; // 这个index0，是一环邻域的核心
        float3 point1 = _modelVertex[index1];
        float3 point2 = _modelVertex[index2];

        // 下面的循环里，存在重复计算同一四面体采样点的现象。可否在这里提前统一计算4面体对应的采样点数组，下面直接开箱即用？
        // 这么的话，涉及到io，不知效率最终是更高还是更低
        // 会超过可用寄存器的数量，导致过量io，更慢……io比计算要慢的多的

        // float3 sample_point_arr[1000];

        // for(int _i = 0;_i<1000;_i++){
        //     sample_point_arr[_i] = float3(0,0,0);
        // }

        // GenerateSamplePoint(point0,point1,point2,oldPosition,sample_point_arr);

        // // 长度为1000的数组会把寄存器用完，那就说明，数据确实从显存传到片内了。把长度设置短点，开个128的试试
        // float4 tmp_astu[128];
        // for(int _i=0;_i<128;_i++){
        //     tmp_astu[i] = _randomASTU[i];
        // }

        // start 更新相关的volume node 【蛮力法实现邻居查找】

        // for (int j = 0;j<_dg_NumberOfNodes;j++){ // 这个循环，非常的耗时，这里尝试对它进行改进
        //     // 预更新该节点对应的volume值
        //     int scale = 1e+5;  // 放大系数，float转int
        //     int delta = - ComputeOverlapVolume(point0,point1,point2,oldPosition,j) * scale; // float转int，凑atomic add for int.    把增量Δvolume数组扩大1e+N倍，并不影响float类型的原始volume数组
        //     InterlockedAdd(_tempDeltaVolume[j],delta);  // 全局共享数组，不需要形参。时隔半年，再次调用。只写2个参数是可行的，第三个参数是可以忽略的，详见：    https://learn.microsoft.com/zh-cn/windows/win32/direct3dhlsl/interlockedadd

        // } 

        // end 更新相关的volume node 【蛮力法实现邻居查找】


        // start 更新相关的volume node 【基于离散网格排列整齐的特点，快速邻居查找】

        int3 cellIndexMin,cellIndexMax;
        ComputeNeighborGridRange(point0,point1,point2,oldPosition,cellIndexMin,cellIndexMax);

        for(int z = cellIndexMin.z; z <= cellIndexMax.z; z++){
            for(int y = cellIndexMin.y; y <= cellIndexMax.y; y++){
                for(int x = cellIndexMin.x; x <= cellIndexMax.x; x++){
                    int cellIndex1D = _dg_Resolution.x * _dg_Resolution.y * z + _dg_Resolution.x * y + x;
                    bool nodeBarrier[32];
                    SetNodeBarrier(int3(x,y,z),cellIndexMin,nodeBarrier);

                    for(int num = 0;num<32;num++){
                        if(nodeBarrier[num]==true){
                            continue;
                        }

                        int nodeIndex = _dg_Cells[cellIndex1D * 32 + num];

                        // 预更新该节点对应的volume值

                        // 计算delta的绝对值，先不考虑正负号
                        int scale = 1e+7;  // 放大系数，float转int
                        // int delta = - ComputeOverlapVolume(point0,point1,point2,oldPosition,nodeIndex) * scale; // float转int，凑atomic add for int.    把增量Δvolume数组扩大1e+N倍，并不影响float类型的原始volume数组
                        int delta = +ComputeOverlapVolumeWithArr(point0,point1,point2,oldPosition,nodeIndex) * scale;
                        // int delta = - ComputeOverlapVolumeWithGauss(point0,point1,point2,oldPosition,nodeIndex) * scale;

                        // 计算delta的符号
                        // 逆时针排列的话，顺序应该是oldPosition,point1,point2,新的顶点位置是point0
                        float3 tmpNormal = cross(point1 - oldPosition,point2 - oldPosition);
                        // delta = dot(point0 - oldPosition,tmpNormal) >= -1e-3 ? +delta : -delta;
                        delta = dot(point0 - oldPosition,tmpNormal) > 0 ? +delta : -delta; // 存档。上面的写法，会出现超过5%的累计误差.这个写法，就没有.

                        InterlockedAdd(_tempDeltaVolume[nodeIndex],delta);  // 全局共享数组，不需要形参。时隔半年，再次调用。只写2个参数是可行的，第三个参数是可以忽略的，详见：    https://learn.microsoft.com/zh-cn/windows/win32/direct3dhlsl/interlockedadd

                    }
                }
            }
        }

        // end 更新相关的volume node【基于离散网格排列整齐的特点，快速邻居查找】

    } // end 隐式边界的更新


    // // 老版本如下：
    // // 与UpdateMeshVertex末尾那里，是相互配合的
    // int scale = 1e+7;  // 放大了scale倍，需要和UpdateMeshVertex末尾的scale保持一致
    // float delta = (float)_tempDeltaVolume[id.x] / scale;
    // _dg_VolumeNode[id.x] += delta;
    // _dg_VolumeNode[id.x] = max(_dg_VolumeNode[id.x],0); // 防止出现负值

    // _tempDeltaVolume[id.x] = 0; //不单独开个初始化函数用来归零了，顺便就在这里做了。下个仿真循环备用；

}



[numthreads(64,1,1)]
void UpdateVolumeMapPost(uint3 id:SV_DispatchThreadID){ 

    // 防止数组越界
    if(id.x >= _dg_NumberOfNodes)
        return;

    // 与UpdateMeshVertex末尾那里，是相互配合的
    int scale = 1e+7;  // 放大了scale倍，需要和UpdateMeshVertex末尾的scale保持一致
    float delta = 1.0 * _tempDeltaVolume[id.x] / scale;

    // delta = 0.0001;

    _dg_VolumeNode[id.x] += delta;

    // _dg_VolumeNode[id.x] = max(_dg_VolumeNode[id.x],0); // 防止出现负值
    // _dg_VolumeNode[id.x] = min(_dg_VolumeNode[id.x],1.3 * 3.14 * pow(_supportRadius,3));
    // _dg_VolumeNode[id.x] = clamp(_dg_VolumeNode[id.x],0,1.3*3.14*pow(_supportRadius,3)); // 引入增减以后，只用max就不大够了，用clamp吧

    _tempDeltaVolume[id.x] = 0; //不单独开个初始化函数用来归零了，顺便就在这里做了。下个仿真循环备用；

}


// 2024-04-17 下面这段，是很早时候写的了，这个规划已经过时了
/*  尝试改进updateSDF里的蛮力法，目前的计划如下：

    RWstructbuffer<float> sdfNode // 正宗的sdf 
    RWstructbuffer<uint> tmp_sdfNode // 桥梁作用，纽带作用，嫁接作用，typec转microUSB作用.updateVolume的时候也搞过类似的.

    UpdateSDFPre // 第一个kernel，叫前处理，名字挺形象的
    float sdf = sdfNode[id.x]
    tmp_sdfNode[id.x] = FloatFlip(sdf) // float转uint，然后把符号位移到最后

    UpdateSDF // 第二个kernel，那两个循环就是在这里做的
    for triangle in triangleList:
    for node in nodeList: // 从蛮力法平滑过渡。先看看位操作的正确性【仿真是否爆炸】,再看效率
    float dis = compute(triangle,node)
    uint uint_dis = FloatFlip(dis)
    InterLockMin(tmp_sdfNode[node.index],uint_dis)

    UpdateSDFPost // 第三个kernel，后处理
    uint tmp = tmp_sdfNode[id.x]
    sdfNode[id.x] = asfoat(IFloatFlip(tmp))

*/

// 左移，右移，空出来的都是0
// 按位或的时候，任何数和0按位或，依旧等于它自己.
// 把符号位甩到最后，因为计算sdf的时候，比较的是不带正负号的绝对值大小.
uint FloatFlip(float fl)
{
	uint f = asuint(fl);
	return (f << 1) | (f >> 31);		//Rotate sign bit to least significant
}

// 如果_tempSDFNode[i] == UNCHANGEDSDF，就表示该节点的sdf值本次不需要改变。
// 这个写法，好在哪里呢？一些简单的值，不必再从cpu绑定传递了，直接在计算着色器里写就可以了.
# define UNCHANGEDSDF 0xff000000

[numthreads(64,1,1)]
void UpdateSDFMapPre(uint3 id:SV_DispatchThreadID){ 
    if(id.x >= _dg_NumberOfNodes)   return;

    // _tempSDFNode[id.x] = FloatFlip(_dg_SDFNode[id.x]);

    // 全量更新的写法
    // _tempSDFNode[id.x] = 0xFFFFFFFF; 

    // 增量更新的写法
    _tempSDFNode[id.x] = UNCHANGEDSDF;

    // _tempSDFNode[id.x] = FloatFlip3(1000); // 要算min，就得初始化成max，这里的max还有些不一般，这有个可交互的ieee754的float网站，可以试一试: https://www.h-schmidt.net/FloatConverter/IEEE754.html

    // _tempSDFNode[id.x] = 0xFFFFFFFF; // 有没有更简单的初始化为max的方法啊？试试这个，数电里的。没毛病……uint里的最大值，确实长这个样子……
}



// 增量更新sdf node

// 第一步，找出sdf值发生了变化的节点，标记下来备用.

[numthreads(64,1,1)]
void UpdateSDFMap_1(uint3 id:SV_DispatchThreadID){ 

    if(id.x >= _triangleNum)    return;

    int triangleIndex = id.x;

    int vertexIndex0 = _triangles[triangleIndex*3+0];
    int vertexIndex1 = _triangles[triangleIndex*3+1];
    int vertexIndex2 = _triangles[triangleIndex*3+2];

    if( length(_tempDeltaModelVertex[vertexIndex0])<1e-5 &&
        length(_tempDeltaModelVertex[vertexIndex1])<1e-5 &&
        length(_tempDeltaModelVertex[vertexIndex2])<1e-5 
    )return;

    // 当前帧里和三角形有交集的格子，要考虑到；前一帧和三角形有交集，当前帧没交集的格子，也得考虑到额.

    int3 cellIndexMin_now,cellIndexMax_now;

    ComputeNeighborGridRange(_modelVertex[vertexIndex0], /*故意重复的，为了凑4个顶点，复用前面的函数*/
    _modelVertex[vertexIndex0],
    _modelVertex[vertexIndex1],
    _modelVertex[vertexIndex2],
    cellIndexMin_now,cellIndexMax_now);

    int3 cellIndexMin_past,cellIndexMax_past;

    ComputeNeighborGridRange(_modelVertex[vertexIndex0] - _tempDeltaModelVertex[vertexIndex0], /*故意重复的，为了凑4个顶点，复用前面的函数*/
    _modelVertex[vertexIndex0] - _tempDeltaModelVertex[vertexIndex0],
    _modelVertex[vertexIndex1] - _tempDeltaModelVertex[vertexIndex1],
    _modelVertex[vertexIndex2] - _tempDeltaModelVertex[vertexIndex2],
    cellIndexMin_past,cellIndexMax_past);

    int3 cellIndexMin,cellIndexMax; // 综合当前帧和前一帧，得到和三角形有交集的格子的范围.
    cellIndexMin = min(cellIndexMin_now,cellIndexMin_past);
    cellIndexMax = max(cellIndexMax_now,cellIndexMax_past);

    // 不加前一帧的格子，行不行？————不行，从相交到不交，分割的就不彻底，sdf map都会出现离群点……
    // cellIndexMin = cellIndexMin_now;
    // cellIndexMax = cellIndexMax_now;

    for(int z = cellIndexMin.z; z <= cellIndexMax.z; z++)
        for(int y = cellIndexMin.y; y <= cellIndexMax.y; y++)
            for(int x = cellIndexMin.x; x <= cellIndexMax.x; x++){
                int cellIndex1D = _dg_Resolution.x * _dg_Resolution.y * z + _dg_Resolution.x * y + x;
                for(int num = 0;num<32;num++){
                    int nodeIndex = _dg_Cells[cellIndex1D * 32 + num];
                    _tempSDFNode[nodeIndex] = 0xFFFFFFFF; // 多线程，同时写一个值，应该不存在同时写的问题.所以这里没用原子操作.冲突就冲突吧.随他去吧.
                }
            }  

    // 会不会，这里标记了要计算，但是实际却没有？
    // 如果三角形a标记了节点b，那么至少会有1次计算，即三角形a到节点b的计算。
    // 因为，函数1，2里范围的计算，是同一段代码。谁标记，谁兜底；这个应该是能保证的。
    // 那么，除了UNCHANGEDSDF，其余的应该都是正经的sdf值的翻转.
    
}



// AMD库里面的那个高级的版本
float DistancePointToEdge2(float3 p, float3 x0, float3 x1, out float3 pointOnEdge)
{
	if (x0.x > x1.x)
	{
		float3 temp = x0;
		x0 = x1;
		x1 = temp;
	}

    float3 x10 = x1 - x0;
    
    float t = dot(x1 - p, x10) / dot(x10, x10);
    t = max( 0.0f, min(t, 1.0f) );
    
    pointOnEdge = (t*x0 + (1.0f - t)*x1); // 和out相呼应
    
    float3 a = p - pointOnEdge;
    float d = length(a);
    float3 n = a / (d + 1e-30f);

    return d;
}


// Check if p is in the positive or negative side of triangle (x0, x1, x2)
// Positive side is where the normal vector of triangle ( (x1-x0) x (x2-x0) ) is pointing to.
float SignedDistancePointToTriangle(float3 p, float3 x0, float3 x1, float3 x2, float3 normal0, float3 normal1, float3 normal2)
{
	float d = 0;

	float3 x02 = x0 - x2;
	float l0 = length(x02) + 1e-30f;
	x02 = x02 / l0;
	float3 x12 = x1 - x2;
	float l1 = dot(x12, x02);
	x12 = x12 - l1*x02;
	float l2 = length(x12) + 1e-30f;
	x12 = x12 / l2;
	float3 px2 = p - x2;

	float b = dot(x12, px2) / l2;
	float a = (dot(x02, px2) - l1*b) / l0;
	float c = 1 - a - b;

	// normal vector of triangle. Don't need to normalize this yet.
	float3 nTri = cross((x1 - x0), (x2 - x0));
	float3 n;

	float tol = 1e-8f;

	if (a >= -tol && b >= -tol && c >= -tol)
	{
		n = p - (a*x0 + b*x1 + c*x2);
		d = length(n); // 值的计算
        d = (dot(p - x0, nTri) < 0.f) ? -d : d; // 确定正负号
	}
	else // AMD，是个大厂，它这个代码写的，条理就很清晰额
	{
        // 开辟并初始化3个数组

        float3 normals[6]; // 前面那个是normal0,1,2.并没重名.挺好的.
        normals[0] = normal0;
        normals[1] = normal1;
        normals[2] = normal2;
        normals[3] = normal0 + normal1; // normal of edge01.
        normals[4] = normal1 + normal2; // normal of edge12.
        normals[5] = normal2 + normal0; // normal of edge20.

        float3 nearestPoint[6];
        nearestPoint[0] = x0;
        nearestPoint[1] = x1;
        nearestPoint[2] = x2;

        float distances[6];
        distances[0] = length(p - x0);
        distances[1] = length(p - x1);
        distances[2] = length(p - x2);
        distances[3] = DistancePointToEdge2(p, x0, x1, nearestPoint[3]);
        distances[4] = DistancePointToEdge2(p, x1, x2, nearestPoint[4]);
        distances[5] = DistancePointToEdge2(p, x0, x2, nearestPoint[5]);
        
        // 绝对值的确定
        float minDistance = distances[0];
        for(int i = 1; i < 6; ++i) minDistance = min(minDistance, distances[i]);
        
        // 计算pointOnPlane和normal，确定正负号
        float3 pointOnPlane = nearestPoint[0];
        float3 normal = normals[0];
        
        for(int j = 1; j < 6; ++j)
        {
            int isMin = (minDistance == distances[j]);
            
            pointOnPlane = (isMin) ? nearestPoint[j] : pointOnPlane; // 很符合计算机的特点……
            normal = (isMin) ? normals[j] : normal;
        }
        
        d = ( dot(p - pointOnPlane, normal) < 0.f ) ? -minDistance : minDistance;
    }

    return d; // 以d开头，以d结尾.
}




[numthreads(64,1,1)]
void UpdateSDFMap_2(uint3 id:SV_DispatchThreadID){ 

    if(id.x >= _triangleNum)    return;

    int triangleIndex = id.x;

    int vertexIndex0 = _triangles[triangleIndex*3+0];
    int vertexIndex1 = _triangles[triangleIndex*3+1];
    int vertexIndex2 = _triangles[triangleIndex*3+2];

    // 当前帧里和三角形有交集的格子，要考虑到；前一帧和三角形有交集，当前帧没交集的格子，也得考虑到额.

    int3 cellIndexMin_now,cellIndexMax_now;

    ComputeNeighborGridRange(_modelVertex[vertexIndex0], /*故意重复的，为了凑4个顶点，复用前面的函数*/
    _modelVertex[vertexIndex0],
    _modelVertex[vertexIndex1],
    _modelVertex[vertexIndex2],
    cellIndexMin_now,cellIndexMax_now);

    int3 cellIndexMin_past,cellIndexMax_past;

    ComputeNeighborGridRange(_modelVertex[vertexIndex0] - _tempDeltaModelVertex[vertexIndex0], /*故意重复的，为了凑4个顶点，复用前面的函数*/
    _modelVertex[vertexIndex0] - _tempDeltaModelVertex[vertexIndex0],
    _modelVertex[vertexIndex1] - _tempDeltaModelVertex[vertexIndex1],
    _modelVertex[vertexIndex2] - _tempDeltaModelVertex[vertexIndex2],
    cellIndexMin_past,cellIndexMax_past);

    int3 cellIndexMin,cellIndexMax; // 综合当前帧和前一帧，得到和三角形有交集的格子的范围.
    cellIndexMin = min(cellIndexMin_now,cellIndexMin_past);
    cellIndexMax = max(cellIndexMax_now,cellIndexMax_past);

    // cellIndexMin = cellIndexMin_now;
    // cellIndexMax = cellIndexMax_now;

    // 正式尝试增量更新sdf.
    for(int z = cellIndexMin.z; z <= cellIndexMax.z; z++)
        for(int y = cellIndexMin.y; y <= cellIndexMax.y; y++)
            for(int x = cellIndexMin.x; x <= cellIndexMax.x; x++){
                int cellIndex1D = _dg_Resolution.x * _dg_Resolution.y * z + _dg_Resolution.x * y + x;
                bool nodeBarrier[32];
                SetNodeBarrier(int3(x,y,z),cellIndexMin,nodeBarrier);

                for(int num = 0;num<32;num++){

                    if(nodeBarrier[num]==true)  continue; // 防止格子阵列里的节点，被重复访问.
                    
                    int nodeIndex = _dg_Cells[cellIndex1D * 32 + num];

                    if(_tempSDFNode[nodeIndex] == UNCHANGEDSDF)continue; // 增量更新sdf在代码上的反映.到这里就返回的话，下面点到三角形距离的计算就可以忽略了。

                    float3 nodePosition = _dg_NodeLocalPosition[nodeIndex];
                    
                    float tmp = SignedDistancePointToTriangle(nodePosition,
                    _modelVertex[vertexIndex0],_modelVertex[vertexIndex1],_modelVertex[vertexIndex2],
                    _modelNormal[vertexIndex0],_modelNormal[vertexIndex1],_modelNormal[vertexIndex2]);

                    uint tmpAsUint = FloatFlip(tmp);
                    InterlockedMin(_tempSDFNode[nodeIndex],tmpAsUint);
                }
            }

}



uint IFloatFlip(uint f2)
{
	return (f2 >> 1) | (f2 << 31);
}


[numthreads(64,1,1)]
void UpdateSDFMapPost(uint3 id:SV_DispatchThreadID){ 
    if(id.x >= _dg_NumberOfNodes)   return;

    // 全量更新，全部写回.
    // _dg_SDFNode[id.x] = asfloat(IFloatFlip(_tempSDFNode[id.x]));

    // 不是全部写回，而是部分写回————这就是增量更新。
    if(_tempSDFNode[id.x] != UNCHANGEDSDF)
        _dg_SDFNode[id.x] = asfloat(IFloatFlip(_tempSDFNode[id.x]));

    // 缓解误差累计的问题
    // 改成增量更新sdf以后，应该就不存在0xFFFFFFFF了。
    // if(_tempSDFNode[id.x] == 0xFFFFFFFF){
    //     // if(_dg_VolumeNode[id.x] > 6.8){
    //     //     _dg_VolumeNode[id.x] = 7;
    //     // }
        
    //     // if(_dg_VolumeNode[id.x] < 0.2){
    //     //     _dg_VolumeNode[id.x] = 0;
    //     // }

    //     return;
    // }

    if(_dg_SDFNode[id.x] > +_supportRadius){
        _dg_VolumeNode[id.x] = 0;
    }

    if(_dg_SDFNode[id.x] < -_supportRadius){
        _dg_VolumeNode[id.x] = 1.3*3.14*pow(_supportRadius,3); // 和准确值很接近的
    }

    // _dg_SDFNode[id.x] += 0.2;

    // // if-else不存在了，但是，可以忽略额
    // if(_tempSDFNode[id.x] == 0xFFFFFFFF && _dg_VolumeNode[id.x] > 0.1 && _dg_VolumeNode[id.x] < 6.9){ // 正常情况下，不应该存在这样的节点.
    //     _dg_VolumeNode[id.x] = 7;
    // }else{
    //     // _dg_VolumeNode[id.x] = 0;
    // }


    // // 可视化
    // if(_tempSDFNode[id.x] == 0xFFFFFFFF){
    // // if(isnan(_dg_SDFNode[id.x])){ // 详见：https://learn.microsoft.com/zh-cn/windows/win32/direct3dhlsl/dx-graphics-hlsl-isnan
    //     // _dg_VolumeNode[id.x] = 0;

    //     // 这两种写法，看着是一样的；但第一个符合预期，第二个不符合预期……

    //      // 先不管了……这个问题，不重要.

    //      // 可能这是个连锁反应类型的报错。具体的错不在此处?

    //     // if(_dg_VolumeNode[id.x]>6.9){
    //     //     _dg_VolumeNode[id.x] = 7;
    //     // }else if(_dg_VolumeNode[id.x]<0.1){
    //     //     _dg_VolumeNode[id.x] = 0;
    //     // }else{
    //     //     // do nothing.
    //     //     _dg_VolumeNode[id.x] = 3.5;
    //     // }

    //     // if(_dg_VolumeNode[id.x]<6.9 && _dg_VolumeNode[id.x] > 0.1){
    //     //     _dg_VolumeNode[id.x] = 6;
    //     // }else{
    //     //     _dg_VolumeNode[id.x] = 0;
    //     // }

    //     // if(_dg_VolumeNode[id.x] < 0.1){
    //     //     _dg_VolumeNode[id.x] = 0;
    //     // }else{
    //     //     _dg_VolumeNode[id.x] = 7;
    //     // }

    //     // if(_dg_VolumeNode[id.x] > 0.1){
    //     //     _dg_VolumeNode[id.x] = 7;
    //     // }else{
    //     //     _dg_VolumeNode[id.x] = 0;
    //     // }

    //     if(_dg_VolumeNode[id.x] > 6.8){
    //         _dg_VolumeNode[id.x] = 7;
    //     }
        
    //     if(_dg_VolumeNode[id.x] < 0.2){
    //         _dg_VolumeNode[id.x] = 0;
    //     }

    //     // if(_dg_VolumeNode[id.x] > 0.1 && _dg_VolumeNode[id.x] < 6.9){
    //     //     _dg_VolumeNode[id.x] = 3.5;
    //     // }else{
    //     //     // _dg_VolumeNode[id.x] = 0;
    //     // }

    // }else{
    //     // _dg_VolumeNode[id.x] = 0;
    // }



    // 不单开个kernel了，先在这里做个实验
    // 借助比较准确的sdf，来修正volume map增量更新误差累计导致的明显离群点，提高仿真的稳定性.
    // 修正，应该是两头嘛……
    // 每帧都修正，就不怎么累计的起来了。而且，这个修正的成本也很低，仅仅是O(n).

    // 备注：位于窄带外面的sdf node，其值依旧是初始化时指定的0xFFFFFFFF。只有位于窄带里面的，被赋了值的，才能这么干。

    // if(_dg_SDFNode[id.x] == 0xFFFFFFFF){ // float类型的，无效
    //     _dg_VolumeNode[id.x] = 7;
    //     return;
    // }

    // if(_tempSDFNode[id.x] == 0xFFFFFFFF){ // 位于窄带外的节点
    //     _dg_VolumeNode[id.x] = 0;
    // }else{ // 位于窄带内的节点
    //     _dg_VolumeNode[id.x] = 7;
    // }

    // if(_tempSDFNode[id.x] == 0xFFFFFFFF){ // uint类型的，直等于是有效的.

    //     // if(_dg_VolumeNode[id.x] < 3.5){
    //     //     _dg_VolumeNode[id.x] = 0;
    //     // }else{
    //     //     _dg_VolumeNode[id.x] = 7;
    //     // }

    //     // 这么写，就没问题
    //     // // 不考虑只计算部分窄带的话，这里也可以这么写.
    //     // if(_dg_VolumeNode[id.x]>6.9){
    //     //     _dg_VolumeNode[id.x] = 1.3*3.14*pow(_supportRadius,3);
    //     // }else if(_dg_VolumeNode[id.x]<0.1){
    //     //     _dg_VolumeNode[id.x] = 0;
    //     // }else{

    //     // }

    //     // 这么写，就出问题。刚开始就没有。
    //     // if(_dg_VolumeNode[id.x]>3.5){
    //     //     _dg_VolumeNode[id.x] = 1.3*3.14*pow(_supportRadius,3);
    //     // }else{
    //     //     _dg_VolumeNode[id.x] = 0;
    //     // }

    //     // return; // 该节点位于窄带的外面，忽略.
    // }


    // _dg_SDFNode[id.x] = asfloat(IFloatFlip3(_tempSDFNode[id.x]));



}
 
// 简单点的kernel
[numthreads(64,1,1)]
void UpdateSDFMap(uint3 id:SV_DispatchThreadID){ 

    // 01.纯蛮力法

    // 防止数组越界
    if(id.x >= _dg_NumberOfNodes)
        return;

    // 模型局部坐标系下的坐标
    float3 nodePosition = _dg_NodeLocalPosition[id.x];


    float sdf = +1000;
    for(int i=0;i<_triangleNum;i++){ // 目前是蛮力法，是“节点附近的三角形”，如果改成“三角形附近的节点”，那么就会更快些。但那个涉及到原子操作……
        float tmp = SignedDistancePointToTriangle(nodePosition,
        _modelVertex[_triangles[i*3+0]],_modelVertex[_triangles[i*3+1]],_modelVertex[_triangles[i*3+2]],
        _modelNormal[_triangles[i*3+0]],_modelNormal[_triangles[i*3+1]],_modelNormal[_triangles[i*3+2]]);
        if(abs(tmp) < abs(sdf))
            sdf = tmp;
    }
    _dg_SDFNode[id.x] = sdf;

}

// void ComputeVolumeAndPositionForBoundaryParticles的子函数start

//判断粒子是否在domain里，position是模型局部坐标系下的坐标
//筛选，保证从node插值一定是能做的
bool InDomain(float3 position){
    bool result = true;

    float eps = 0.01; // 为中心差分提前留出余量，eps要有一致性

    for(int i=0;i<3;i++){
        if (position[i] < _dg_DomainMin[i] + 2 * eps)
        {
            result = false;
        }
        if (position[i] > _dg_DomainMax[i] - 2 * eps)
        {
            result = false;
        }
    }

    return result;
}

void ShapeFunction(float3 xi,inout float result[32]){
        // 出现的变量的计算
        float x = xi[0];
        float y = xi[1];
        float z = xi[2];

        float x2 = x * x;
        float y2 = y * y;
        float z2 = z * z;

        float _1mx = 1.0 - x;
        float _1my = 1.0 - y;
        float _1mz = 1.0 - z;

        float _1px = 1.0 + x;
        float _1py = 1.0 + y;
        float _1pz = 1.0 + z;

        float _1m3x = 1.0 - 3.0 * x;
        float _1m3y = 1.0 - 3.0 * y;
        float _1m3z = 1.0 - 3.0 * z;

        float _1p3x = 1.0 + 3.0 * x;
        float _1p3y = 1.0 + 3.0 * y;
        float _1p3z = 1.0 + 3.0 * z;

        float _1mxt1my = _1mx * _1my;
        float _1mxt1py = _1mx * _1py;
        float _1pxt1my = _1px * _1my;
        float _1pxt1py = _1px * _1py;

        float _1mxt1mz = _1mx * _1mz;
        float _1mxt1pz = _1mx * _1pz;
        float _1pxt1mz = _1px * _1mz;
        float _1pxt1pz = _1px * _1pz;

        float _1myt1mz = _1my * _1mz;
        float _1myt1pz = _1my * _1pz;
        float _1pyt1mz = _1py * _1mz;
        float _1pyt1pz = _1py * _1pz;

        float _1mx2 = 1.0 - x2;
        float _1my2 = 1.0 - y2;
        float _1mz2 = 1.0 - z2;

        // Corner nodes.
        float fac = 1.0 / 64.0 * (9.0 * (x2 + y2 + z2) - 19.0);
        result[0] = fac * _1mxt1my * _1mz;
        result[1] = fac * _1pxt1my * _1mz;
        result[2] = fac * _1mxt1py * _1mz;
        result[3] = fac * _1pxt1py * _1mz;
        result[4] = fac * _1mxt1my * _1pz;
        result[5] = fac * _1pxt1my * _1pz;
        result[6] = fac * _1mxt1py * _1pz;
        result[7] = fac * _1pxt1py * _1pz;

        // Edge nodes.

        // section1
        fac = 9.0 / 64.0 * _1mx2;
        float fact1m3x = fac * _1m3x;
        float fact1p3x = fac * _1p3x;
        result[8] = fact1m3x * _1myt1mz;
        result[9] = fact1p3x * _1myt1mz;
        result[10] = fact1m3x * _1myt1pz;
        result[11] = fact1p3x * _1myt1pz;
        result[12] = fact1m3x * _1pyt1mz;
        result[13] = fact1p3x * _1pyt1mz;
        result[14] = fact1m3x * _1pyt1pz;
        result[15] = fact1p3x * _1pyt1pz;

        // section2
        fac = 9.0 / 64.0 * _1my2;
        float fact1m3y = fac * _1m3y;
        float fact1p3y = fac * _1p3y;
        result[16] = fact1m3y * _1mxt1mz;
        result[17] = fact1p3y * _1mxt1mz;
        result[18] = fact1m3y * _1pxt1mz;
        result[19] = fact1p3y * _1pxt1mz;
        result[20] = fact1m3y * _1mxt1pz;
        result[21] = fact1p3y * _1mxt1pz;
        result[22] = fact1m3y * _1pxt1pz;
        result[23] = fact1p3y * _1pxt1pz;

        // section3
        fac = 9.0 / 64.0 * _1mz2;
        float fact1m3z = fac * _1m3z;
        float fact1p3z = fac * _1p3z;
        result[24] = fact1m3z * _1mxt1my;
        result[25] = fact1p3z * _1mxt1my;
        result[26] = fact1m3z * _1mxt1py;
        result[27] = fact1p3z * _1mxt1py;
        result[28] = fact1m3z * _1pxt1my;
        result[29] = fact1p3z * _1pxt1my;
        result[30] = fact1m3z * _1pxt1py;
        result[31] = fact1p3z * _1pxt1py;
}



//插值，x是局部坐标系下的坐标
//type=0：从sdf node插值
//type=1：从volume node插值【后续可以改成enum，更清晰】
float Interpolate(float3 x,int type){

    //由于之前在InDomain里，已经筛选过了，所以这里无需判断，可以直接做插值
    float result = 0;

    //这相当于在计算offset
    float3 cellIndex = x - _dg_DomainMin;

    //for (int i = 0; i < 3; i++) 
    //    cellIndex[i] = cellIndex[i] / _dg_CellSize[i];

    cellIndex.x /= _dg_CellSize.x;
    cellIndex.y /= _dg_CellSize.y;
    cellIndex.z /= _dg_CellSize.z;


    int3 mi = int3((int)cellIndex.x,(int)cellIndex.y,(int)cellIndex.z);

    //int cellIndex1D = resolution.x * resolution.y * mi[2] + resolution.x * mi[1] + mi[0];
    int cellIndex1D = _dg_Resolution.x * _dg_Resolution.y * mi.z + _dg_Resolution.x * mi.y + mi.x;

    float3 subDomainMin = _dg_DomainMin + float3(mi.x*_dg_CellSize.x,mi.y*_dg_CellSize.y,mi.z*_dg_CellSize.z);
    float3 subDomainMax = subDomainMin + _dg_CellSize;
    float3 subDomainCenter = (subDomainMin+subDomainMax)/2.0;

    // 开始几何变换，把点的坐标x映射到大小为2*2*2且坐标原点在中心的标准cell中去
    float3 denom = (subDomainMax-subDomainMin);
    float3 c0 = float3(2.0 / denom.x, 2.0 / denom.y, 2.0 / denom.z); // cell大小的走样程度，用于缩放变换
    float3 c1 = float3(c0.x * subDomainCenter.x, c0.y * subDomainCenter.y, c0.z * subDomainCenter.z);//仅缩放以后，cell中心点的坐标
    float3 xi = float3(c0.x * x[0], c0.y * x[1], c0.z * x[2]) - c1; // 标准cell下的坐标xi

    float N[32];
    ShapeFunction(xi,N); // 同样的网格结构，权重是通用的

    for(int j=0;j<32;j++){
        int v = _dg_Cells[cellIndex1D*32+j];
        float c = 0;
        if(0==type){
            c = _dg_SDFNode[v];
        }else{
            c = _dg_VolumeNode[v];
        }
        result += N[j]*c;
    }

    return result;
    
}


bool NearBoundary(float3 position){
    bool res = true;

    float volume = Interpolate(position,1);
    if(volume < 5e-1)
        res = false;

    // if(volume < _volumeList[0]){ // 这一项，可以认为是0额……
    //     res = false;
    // }
    // if(volume > _volumeList[100]){  // cpu上的generateVolumeList,GPU上的这里，还有ComputeSDFByVolume，这3个地方，都公用同一个数组长度的.都得保持一致
    //     res = false;
    // }

    // 部分格子，远离模型表面，超出了splat的范围。它的值可能还是0xFFFFFFFF…… 这种情况下，插值的结果的绝对值应该是很大的.就按这个特征来写程序吧.
    float sdf = Interpolate(position,0);
    if(abs(sdf)>_supportRadius)
        res = false;

    return res;
}


// position是模型局部坐标系下的坐标
float3 PointOnMesh(float3 position){

        float3 fdNormal = float3(0,0,0);

        float eps = 0.01; // 需要和Indomain里的eps保持一致

        // 分别计算fdNormal的三个维度

        float3 _offset=float3(0,0,0);
        float front=0;
        float back=0;

        _offset = float3(eps,0,0);
        front = Interpolate(position + _offset,0);
        back = Interpolate(position - _offset,0);
        fdNormal.x = (front-back)/(2*eps);

        _offset = float3(0,eps,0);
        front = Interpolate(position + _offset,0);
        back = Interpolate(position -_offset,0);
        fdNormal.y = (front-back)/(2*eps);

        _offset = float3(0,0,eps);
        front = Interpolate(position +_offset,0);
        back = Interpolate(position - _offset,0);
        fdNormal.z = (front-back)/(2*eps);

        float distance = Interpolate(position,0); // 插值，这个是带符号距离

        if(distance<0.2){ // 方向由fdNormal确定就行了，带符号距离为负的时候会对方向有影响，可能造成穿透,得过滤掉才行
            //distance = 0.3;
            //穿透的程度越深，惩罚力应该就越大，distance应该就越小
            // distance = 0.1 * max(0.05,1-abs(distance));
            distance = 0.2;

        }

        //distance = abs(distance);

        return position - distance * normalize(fdNormal);
}



// void ComputeVolumeAndPositionForBoundaryParticles的子函数end



[numthreads(32,1,1)]
void ComputeVolumeAndPositionForBoundaryParticles(uint3 id:SV_DispatchThreadID){ 

    // float3 _position = _positions[id.x] - _dg_Translate; //把粒子坐标转化到模型局部坐标系下

    //把粒子坐标转化到模型局部坐标系下
    // 尝试新的转换方法
    // float3 _position = mul(float4(_positions[id.x],1.0),_dg_worldToLocalMatrix).xyz; // 无效 ；从列主序，寄存器，dp4的角度去看，应该就能晓得了.模仿这个：https://zhuanlan.zhihu.com/p/560076693
    float3 _position = mul(float4(_positions[id.x],1.0),transpose(_dg_worldToLocalMatrix)).xyz; // 有效了 ， 但还是觉得有点拧巴，这个博客里也觉得拧巴：https://www.cnblogs.com/lancidie/p/14272618.html



    // // all in volume map的尝试
    // if(InDomain(_position) && NearBoundary(_position)){ // 需要做碰撞检测的情况
    //     _virtualBoundaryParticlesData[id.x].volume = Interpolate(_position,1);
    //     _virtualBoundaryParticlesData[id.x].position = mul(float4(PointOnMesh(_position),1.0),transpose(_dg_localToWorldMatrix)).xyz;

    // }else{
    //     _virtualBoundaryParticlesData[id.x].volume = 0;
    //     _virtualBoundaryParticlesData[id.x].position = _positions[id.x];//这个比float3(0,0,0)好，这个往核函数里一代，直接就返回0了，都不用算
    // }

    // 新版的，假设这个文件对应的是model0，所以vbp的下标就都是0.
    if(InDomain(_position) && NearBoundary(_position)){ // 需要做碰撞检测的情况
        _virtualBoundaryParticlesData[id.x].vbp[0].w = Interpolate(_position,1);
        _virtualBoundaryParticlesData[id.x].vbp[0].xyz = mul(float4(PointOnMesh(_position),1.0),transpose(_dg_localToWorldMatrix)).xyz;

    }else{
        _virtualBoundaryParticlesData[id.x].vbp[0].w = 0;
        _virtualBoundaryParticlesData[id.x].vbp[0].xyz = _positions[id.x];//这个比float3(0,0,0)好，这个往核函数里一代，直接就返回0了，都不用算
    }    

}
